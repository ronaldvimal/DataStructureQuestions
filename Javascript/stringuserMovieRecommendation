"use strict";
/*

You are analyzing data for Aquaintly, a hot new social network.

One of the fun features of Aquaintly is that users can rate movies they have seen from 1 to 5. We want to use these ratings to make movie recommendations.

Ratings will be provided in the following format:
  [Member Name, Movie Name, Rating]

We consider two users to have similar taste in movies if they have both rated the same movie as 4 or 5. 

A movie should be recommended to a user if:
- They haven't rated the movie
- A user with similar taste has rated the movie as 4 or 5

Example: 
ratings = [
    ["Alice", "Frozen", "5"],
    ["Bob", "Mad Max", "5"],
    ["Charlie", "Lost In Translation", "4"],
    ["Charlie", "Inception", "4"],
    ["Bob", "All About Eve", "3"],
    ["Bob", "Lost In Translation", "5"],
    ["Dennis", "All About Eve", "5"],
    ["Dennis", "Mad Max", "4"],
    ["Charlie", "Topsy-Turvy", "2"],
    ["Dennis", "Topsy-Turvy", "4"],
    ["Alice", "Lost In Translation", "1"]
]
If we want to recommend a movie to Charlie, we would recommend "Mad Max" because:
- Charlie has not rated "Mad Max"
- Charlie and Bob have similar taste as they both rated "Lost in Translation" 4 or 5
- Bob rated "Mad Max" a 5

Write a function that takes the name of a user and a collection of ratings, and returns a collection of all movie recommendations that can be made for the given user.

All test cases:
recommendations("Charlie", ratings) => ["Mad Max"]
recommendations("Bob", ratings) => ["Inception", "Topsy-Turvy"]
recommendations("Dennis", ratings) => ["Lost In Translation"]
recommendations("Alice", ratings) => []

Complexity Variable:
R = number of ratings
M = number of movies
U = number of users

*/

// TODO --- Write your function, returning the result


const ratings = [
  ['Alice', 'Frozen', '5'],
  ['Bob', 'Mad Max', '5'],
  ['Charlie', 'Lost In Translation', '4'],
  ['Charlie', 'Inception', '4'],
  ['Bob', 'All About Eve', '3'],
  ['Bob', 'Lost In Translation', '5'],
  ['Dennis', 'All About Eve', '5'],
  ['Dennis', 'Mad Max', '4'],
  ['Charlie', 'Topsy-Turvy', '2'],
  ['Dennis', 'Topsy-Turvy', '4'],
  ['Alice', 'Lost In Translation', '1']
];

const userRecommendation = (user, ratings) => {
        const
            users = {},
            movies = {},
            result = [];
            
        for (const [u, m, r] of ratings) {
            if (r < 4) continue;
            (users[u] ??= []).push(m);
            (movies[m] ??= []).push(u);
        }

        console.log(users);
        console.log(movies);

        for (const movie of users[user]) {
            for (const u of movies[movie]) {
                if (u !== user) result.push(...users[u]);
            }
        }

        console.log('result '+ result);
        
        return result.filter(m => !users[user].includes(m));
    }

    console.log(userRecommendation('Charlie', ratings));


const recommendations = (user, ratings) =>{

const hash = {};
for(let i=0; i< ratings.length; i++){
    if(ratings[i][2] >=4){
      if(!hash[ratings[i][0]]){
     hash[ratings[i][0]] = [ratings[i][1]];
      }else {
 hash[ratings[i][0]].push(ratings[i][1]);
      }
      
  }
}
let userMovie = hash[user];
 console.log('userMovie ' + userMovie);
let result =[];
for(let key of Object.keys(hash)){
  //console.log(hash[key] + ' ' + key);
  let response = userMovie.filter(item => !hash[key].includes(item));
  console.log(response + '  ' +  key);
  if(response.length >0){

  }
  
}

//

}

// TODO --- Run the test case from above through your function, printing the returned result